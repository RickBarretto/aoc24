;; module: "AOC24 - Day 05"
;; author: "RickBarretto" 
;; license: {
;;		This Source Code Form is subject to the terms of the Mozilla Public
;;  	License, v. 2.0. If a copy of the MPL was not distributed with this
;; 		file, You can obtain one at https://mozilla.org/MPL/2.0/.
;; }


ordered?: $[request :block][
	;; Checks if a request follows the ordering rules

    [reqs rules]: @[request orderingRules]
	max: sub size reqs 1
	next: $ => [get reqs inc &]
	
	reqs | select => [in? & keys rules]
		 | take max
	     | map.with: 'i [page]
			-> in? (next i) (get rules page)
		 | all?
]

middle: $[blk :block][
	;; Gets the middle element of a block
	get blk (div (size blk) 2)
]

resultFrom: $[file :string][

	file: read.lines file 

	; Extracts the ordering rules into a dictionary
	orderingRules: (
		file | select => [in? "|" &]	; All lines with '|' contains a rule.
			 | map => [split.by: "|" &]	; Precedence rule is separated by '|'.
			 | gather => first			; The first element is the reference page.	
			 | map [ref, pre] -> @[ref, map pre => last]
			 | flatten.once 
			 | dictionary.raw
	)

	updateRequests: (
		file | select => [in? "," &]	; All lines with ',' contains an update request
			 | map => [split.by: "," &]
	)

	; Selects the update requests that follow the ordering rules
	toUpdate: select updateRequests => ordered?

	; Extracts the middle element of each request and sums them
	toUpdate
		| map => [to :integer middle &]
		| sum
]

if standalone? [
	print resultFrom "../data/rick.txt"
]
